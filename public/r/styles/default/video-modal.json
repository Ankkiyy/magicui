{
  "name": "video-modal",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/video-modal.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nconst VideoModal = DialogPrimitive.Root;\n\nconst VideoModalTrigger = DialogPrimitive.Trigger;\n\nconst VideoModalPortal = ({\n  children,\n  ...props\n}: DialogPrimitive.DialogPortalProps) => (\n  <DialogPrimitive.Portal {...props}>\n    <div className=\"min-w-screen fixed inset-0 z-50 flex min-h-screen items-center justify-center p-2\">\n      {children}\n    </div>\n  </DialogPrimitive.Portal>\n);\nVideoModalPortal.displayName = DialogPrimitive.Portal.displayName;\n\nconst VideoModalOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 backdrop-blur-xl\", className)}\n    {...props}\n    asChild\n  >\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    />\n  </DialogPrimitive.Overlay>\n));\nVideoModalOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst VideoModalContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <VideoModalPortal>\n    <VideoModalOverlay />\n    <DialogPrimitive.Content ref={ref} {...props} asChild>\n      <motion.div\n        className={cn(\n          \"fixed z-50 flex h-screen w-screen items-center justify-center p-3\",\n          className\n        )}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        <motion.div\n          className=\"relative mx-auto flex h-full w-full items-center justify-center rounded-2xl border border-primary/10 bg-background/10\"\n          initial={{ scale: 0.9, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          exit={{ scale: 0.9, opacity: 0 }}\n          transition={{ type: \"spring\", damping: 20, stiffness: 300 }}\n        >\n          {/* Mobile close button */}\n          <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-full border border-gray-950/[.1] bg-gray-950/[.01] p-2 transition duration-300 hover:bg-gray-950/[.05] dark:border-gray-50/[.1] dark:bg-gray-50/[.10] dark:hover:bg-gray-50/[.15] lg:hidden\">\n            <svg\n              fill=\"none\"\n              height=\"12\"\n              viewBox=\"0 0 12 12\"\n              width=\"12\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M1 1L11 11M11 1L1 11\"\n                className=\"stroke-current\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"1.5\"\n              ></path>\n            </svg>\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n\n          <div className=\"flex h-[80%] w-full max-w-5xl gap-6\">\n            <DialogPrimitive.Close className=\"hidden self-start rounded-full border border-gray-950/[.1] bg-gray-950/[.01] p-2 transition duration-300 hover:bg-gray-950/[.05] dark:border-gray-50/[.1] dark:bg-gray-50/[.10] dark:hover:bg-gray-50/[.15] lg:block\">\n              <svg\n                fill=\"none\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                width=\"12\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M1 1L11 11M11 1L1 11\"\n                  className=\"stroke-current\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"1.5\"\n                ></path>\n              </svg>\n              <span className=\"sr-only\">Close</span>\n            </DialogPrimitive.Close>\n            <div className=\"flex w-full flex-col max-lg:p-4 max-lg:text-center\">\n              {children}\n            </div>\n          </div>\n        </motion.div>\n      </motion.div>\n    </DialogPrimitive.Content>\n  </VideoModalPortal>\n));\nVideoModalContent.displayName = DialogPrimitive.Content.displayName;\n\nconst VideoModalTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"mb-4 text-4xl font-bold text-gray-950 dark:text-gray-50\",\n      className\n    )}\n    {...props}\n  />\n));\nVideoModalTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst VideoModalDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\n      \"mb-6 text-xl text-gray-950/80 dark:text-gray-50/70\",\n      className\n    )}\n    {...props}\n  />\n));\nVideoModalDescription.displayName = DialogPrimitive.Description.displayName;\n\nconst VideoPreview = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"absolute inset-0 z-10 transition-opacity duration-300 group-[.playing]:pointer-events-none group-[.playing]:opacity-0\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n));\nVideoPreview.displayName = \"VideoPreview\";\n\nconst VideoPlayButton = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"absolute inset-0 z-20 flex items-center justify-center transition-opacity duration-300 group-[.playing]:pointer-events-none group-[.playing]:opacity-0\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n));\nVideoPlayButton.displayName = \"VideoPlayButton\";\n\nconst VideoPlayer = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  const [isPlaying, setIsPlaying] = React.useState(false);\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"group relative aspect-video max-w-4xl overflow-hidden rounded-xl border border-gray-950/[.1] object-cover dark:border-gray-50/[.1]\",\n        isPlaying && \"playing\",\n        className\n      )}\n      onClick={() => setIsPlaying(true)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n});\nVideoPlayer.displayName = \"VideoPlayer\";\n\nconst VideoModalVideo = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"aspect-video max-w-4xl overflow-hidden rounded-xl border border-gray-950/[.1] object-cover shadow-xl dark:border-gray-50/[.1]\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n));\nVideoModalVideo.displayName = \"VideoModalVideo\";\n\nexport {\n  VideoModal,\n  VideoModalTrigger,\n  VideoModalContent,\n  VideoModalTitle,\n  VideoModalDescription,\n  VideoModalVideo,\n  VideoPreview,\n  VideoPlayButton,\n  VideoPlayer,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}